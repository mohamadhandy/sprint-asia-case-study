// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entity "service-task-list/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// TaskRepository is an autogenerated mock type for the TaskRepository type
type TaskRepository struct {
	mock.Mock
}

// CheckSubTask provides a mock function with given fields: taskId, subTaskId
func (_m *TaskRepository) CheckSubTask(taskId int, subTaskId int) error {
	ret := _m.Called(taskId, subTaskId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(taskId, subTaskId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckTask provides a mock function with given fields: id
func (_m *TaskRepository) CheckTask(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSubTask provides a mock function with given fields: taskId, subTask
func (_m *TaskRepository) CreateSubTask(taskId int, subTask *entity.SubTask) error {
	ret := _m.Called(taskId, subTask)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *entity.SubTask) error); ok {
		r0 = rf(taskId, subTask)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTask provides a mock function with given fields: task
func (_m *TaskRepository) CreateTask(task *entity.TaskRequest) error {
	ret := _m.Called(task)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.TaskRequest) error); ok {
		r0 = rf(task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSubTask provides a mock function with given fields: taskId, subTaskId
func (_m *TaskRepository) DeleteSubTask(taskId int, subTaskId int) error {
	ret := _m.Called(taskId, subTaskId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(taskId, subTaskId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTask provides a mock function with given fields: id
func (_m *TaskRepository) DeleteTask(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllSubTaskByCompleted provides a mock function with given fields: taskId, completed
func (_m *TaskRepository) GetAllSubTaskByCompleted(taskId int, completed string) ([]*entity.SubTask, error) {
	ret := _m.Called(taskId, completed)

	var r0 []*entity.SubTask
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string) ([]*entity.SubTask, error)); ok {
		return rf(taskId, completed)
	}
	if rf, ok := ret.Get(0).(func(int, string) []*entity.SubTask); ok {
		r0 = rf(taskId, completed)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.SubTask)
		}
	}

	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(taskId, completed)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskList provides a mock function with given fields: completed
func (_m *TaskRepository) GetTaskList(completed int) ([]*entity.Task, error) {
	ret := _m.Called(completed)

	var r0 []*entity.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]*entity.Task, error)); ok {
		return rf(completed)
	}
	if rf, ok := ret.Get(0).(func(int) []*entity.Task); ok {
		r0 = rf(completed)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(completed)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSubTask provides a mock function with given fields: taskId, subTask
func (_m *TaskRepository) UpdateSubTask(taskId int, subTask *entity.SubTask) error {
	ret := _m.Called(taskId, subTask)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *entity.SubTask) error); ok {
		r0 = rf(taskId, subTask)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTask provides a mock function with given fields: task
func (_m *TaskRepository) UpdateTask(task *entity.Task) error {
	ret := _m.Called(task)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Task) error); ok {
		r0 = rf(task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTaskRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewTaskRepository creates a new instance of TaskRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTaskRepository(t mockConstructorTestingTNewTaskRepository) *TaskRepository {
	mock := &TaskRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
